{"ast":null,"code":"import { saveUserData } from '../authorization/actions';\nimport { getDepartments, getDoctors, getSchedule } from './proxyEmias';\nregistrationUser;\nexport const loadSchedule = payload => {\n  return function (dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload).then(response => {\n      if (response.status !== 200) {\n        throw 'Ошибка авторизации';\n      }\n\n      return response;\n    }).then(response => response.json()).then(response => {\n      dispatch(loadScheduleSuccess(response));\n      dispatch(saveUserData(payload));\n    }).catch(() => dispatch(loadScheduleFailureAction));\n  };\n};\nexport const loadScheduleAction = {\n  type: 'LOAD_SCHEDULE',\n  payload: null\n};\nexport const loadScheduleFailureAction = {\n  type: 'LOAD_SCHEDULE_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadScheduleSuccess = payload => {\n  return {\n    type: 'LOAD_SCHEDULE_SUCCESS',\n    payload: payload\n  };\n};\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null\n};","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/schedule/actions.js"],"names":["saveUserData","getDepartments","getDoctors","getSchedule","registrationUser","loadSchedule","payload","dispatch","loadScheduleAction","then","response","status","json","loadScheduleSuccess","catch","loadScheduleFailureAction","type","closeBanner"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,0BAA3B;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,QAAwD,cAAxD;AAIAC,gBAAgB;AAChB,OAAO,MAAMC,YAAY,GAAGC,OAAO,IAAI;AACtC,SAAO,UAASC,QAAT,EAAmB;AACvBA,IAAAA,QAAQ,CAACC,kBAAD,CAAR;AACA,WAAOL,WAAW,CAAC,GAAGG,OAAJ,CAAX,CACEG,IADF,CACOC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAAC,cAAM,oBAAN;AAA2B;;AACzD,aAAOD,QAAP;AACD,KAJF,EAKED,IALF,CAKOC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EALnB,EAMEH,IANF,CAMOC,QAAQ,IAAI;AAACH,MAAAA,QAAQ,CAACM,mBAAmB,CAACH,QAAD,CAApB,CAAR;AAA0CH,MAAAA,QAAQ,CAACP,YAAY,CAACM,OAAD,CAAb,CAAR;AAAgC,KAN9F,EAOEQ,KAPF,CAOQ,MAAMP,QAAQ,CAACQ,yBAAD,CAPtB,CAAP;AAQF,GAVD;AAWA,CAZM;AAcP,OAAO,MAAMP,kBAAkB,GAAG;AACjCQ,EAAAA,IAAI,EAAE,eAD2B;AAEjCV,EAAAA,OAAO,EAAE;AAFwB,CAA3B;AAKP,OAAO,MAAMS,yBAAyB,GAAG;AACxCC,EAAAA,IAAI,EAAE,uBADkC;AAExCV,EAAAA,OAAO,EAAE;AAF+B,CAAlC;AAKP,OAAO,MAAMO,mBAAmB,GAAGP,OAAO,IAAI;AAC5C,SAAQ;AACTU,IAAAA,IAAI,EAAE,uBADG;AAETV,IAAAA,OAAO,EAAEA;AAFA,GAAR;AAGE,CAJG;AAMP,OAAO,MAAMW,WAAW,GAAG;AACzBD,EAAAA,IAAI,EAAE,gBADmB;AAEzBV,EAAAA,OAAO,EAAE;AAFgB,CAApB","sourcesContent":["import {saveUserData} from '../authorization/actions'\nimport { getDepartments, getDoctors, getSchedule } from './proxyEmias'\n\n\n\nregistrationUser\nexport const loadSchedule = payload => {\n\treturn function(dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload)\n            .then(response => {\n              if (response.status !== 200) {throw 'Ошибка авторизации'}\n              return response\n            })\n            .then(response => response.json())\n            .then(response => {dispatch(loadScheduleSuccess(response));  dispatch(saveUserData(payload))})\n            .catch(() => dispatch(loadScheduleFailureAction));\n\t};\n};\n\nexport const loadScheduleAction = {\n\ttype: 'LOAD_SCHEDULE',\n\tpayload: null,\n};\n\nexport const loadScheduleFailureAction = {\n\ttype: 'LOAD_SCHEDULE_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\nexport const loadScheduleSuccess = payload => {\n  return ({\n\ttype: 'LOAD_SCHEDULE_SUCCESS',\n\tpayload: payload,\n});}\n\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null,\n}"]},"metadata":{},"sourceType":"module"}