{"ast":null,"code":"import { registrationUser } from '../back';\nimport { getDepartments, getDoctors, getSchedule } from '../proxyEmias';\nexport const loadDepartments = payload => {\n  return function (dispatch) {\n    dispatch(loadDepartmentsAction);\n    return getDepartments(...payload).then(response => {\n      if (response.status !== 200) {\n        throw 'Ошибка авторизации';\n      }\n\n      return response;\n    }).then(response => response.json()).then(response => {\n      registrationUser(...payload).then(innerResponse => {\n        if (innerResponse.status !== 200 || innerResponse.status !== 201) {\n          throw 'Ошибка авторизации';\n        }\n\n        return response;\n      }).then(response => dispatch(loadDepartmentsSuccess(response))).catch(() => dispatch(loadDepartmentsFailureAction));\n    });\n  };\n};\nexport const loadScheduleAction = {\n  type: 'LOAD_SCHEDULE',\n  payload: null\n};\nexport const loadScheduleFailureAction = {\n  type: 'LOAD_SCHEDULE_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadScheduleSuccess = payload => {\n  return {\n    type: 'LOAD_SCHEDULE_SUCCESS',\n    payload: payload\n  };\n};\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null\n};","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/schedule/actions.js"],"names":["registrationUser","getDepartments","getDoctors","getSchedule","loadDepartments","payload","dispatch","loadDepartmentsAction","then","response","status","json","innerResponse","loadDepartmentsSuccess","catch","loadDepartmentsFailureAction","loadScheduleAction","type","loadScheduleFailureAction","loadScheduleSuccess","closeBanner"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,SAAjC;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,QAAwD,eAAxD;AAGA,OAAO,MAAMC,eAAe,GAAGC,OAAO,IAAI;AACzC,SAAO,UAASC,QAAT,EAAmB;AACvBA,IAAAA,QAAQ,CAACC,qBAAD,CAAR;AACA,WAAON,cAAc,CAAC,GAAGI,OAAJ,CAAd,CACEG,IADF,CACOC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAAC,cAAM,oBAAN;AAA2B;;AACzD,aAAOD,QAAP;AACD,KAJF,EAKED,IALF,CAKOC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EALnB,EAMEH,IANF,CAMOC,QAAQ,IAAI;AAChBT,MAAAA,gBAAgB,CAAC,GAAGK,OAAJ,CAAhB,CACCG,IADD,CACMI,aAAa,IAAI;AACrB,YAAKA,aAAa,CAACF,MAAd,KAAyB,GAA1B,IAAmCE,aAAa,CAACF,MAAd,KAAyB,GAAhE,EAAsE;AACpE,gBAAM,oBAAN;AACD;;AACD,eAAOD,QAAP;AACD,OAND,EAOCD,IAPD,CAOMC,QAAQ,IAAIH,QAAQ,CAACO,sBAAsB,CAACJ,QAAD,CAAvB,CAP1B,EAQCK,KARD,CAQO,MAAMR,QAAQ,CAACS,4BAAD,CARrB;AASD,KAhBF,CAAP;AAiBF,GAnBD;AAoBA,CArBM;AAuBP,OAAO,MAAMC,kBAAkB,GAAG;AACjCC,EAAAA,IAAI,EAAE,eAD2B;AAEjCZ,EAAAA,OAAO,EAAE;AAFwB,CAA3B;AAKP,OAAO,MAAMa,yBAAyB,GAAG;AACxCD,EAAAA,IAAI,EAAE,uBADkC;AAExCZ,EAAAA,OAAO,EAAE;AAF+B,CAAlC;AAKP,OAAO,MAAMc,mBAAmB,GAAGd,OAAO,IAAI;AAC5C,SAAQ;AACTY,IAAAA,IAAI,EAAE,uBADG;AAETZ,IAAAA,OAAO,EAAEA;AAFA,GAAR;AAGE,CAJG;AAMP,OAAO,MAAMe,WAAW,GAAG;AACzBH,EAAAA,IAAI,EAAE,gBADmB;AAEzBZ,EAAAA,OAAO,EAAE;AAFgB,CAApB","sourcesContent":["import { registrationUser } from '../back'\nimport { getDepartments, getDoctors, getSchedule } from '../proxyEmias'\n\n\nexport const loadDepartments = payload => {\n\treturn function(dispatch) {\n    dispatch(loadDepartmentsAction);\n    return getDepartments(...payload)\n            .then(response => {\n              if (response.status !== 200) {throw 'Ошибка авторизации'}\n              return response\n            })\n            .then(response => response.json())\n            .then(response => {\n              registrationUser(...payload)\n              .then(innerResponse => {\n                if ((innerResponse.status !== 200) || (innerResponse.status !== 201)) {\n                  throw 'Ошибка авторизации'\n                }\n                return response;\n              })\n              .then(response => dispatch(loadDepartmentsSuccess(response)))\n              .catch(() => dispatch(loadDepartmentsFailureAction));\n            });\n\t};\n};\n\nexport const loadScheduleAction = {\n\ttype: 'LOAD_SCHEDULE',\n\tpayload: null,\n};\n\nexport const loadScheduleFailureAction = {\n\ttype: 'LOAD_SCHEDULE_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\nexport const loadScheduleSuccess = payload => {\n  return ({\n\ttype: 'LOAD_SCHEDULE_SUCCESS',\n\tpayload: payload,\n});}\n\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null,\n}"]},"metadata":{},"sourceType":"module"}