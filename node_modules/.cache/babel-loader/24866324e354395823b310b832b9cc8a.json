{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactInputRange = require('react-input-range');\n\nvar _reactInputRange2 = _interopRequireDefault(_reactInputRange);\n\nrequire('./styles.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*** src/index.js ***/\n\n\nvar TimeRangeSlider = function (_Component) {\n  _inherits(TimeRangeSlider, _Component);\n\n  function TimeRangeSlider(props) {\n    _classCallCheck(this, TimeRangeSlider);\n\n    var _this = _possibleConstructorReturn(this, (TimeRangeSlider.__proto__ || Object.getPrototypeOf(TimeRangeSlider)).call(this, props));\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(TimeRangeSlider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {}\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {}\n  }, {\n    key: 'minuteToTime',\n    value: function minuteToTime(value) {\n      value = value > 1439 ? 1439 : value;\n      var hours = Math.floor(value / 60),\n          minutes = value - hours * 60,\n          ampm = null;\n      if (hours.length == 1) hours = '0' + hours;\n      if (minutes.length == 1) minutes = '0' + minutes;\n      if (minutes == 0) minutes = '00';\n\n      if (this.props.format == 12) {\n        ampm = \"AM\";\n\n        if (hours >= 12) {\n          if (hours == 12) {\n            hours = hours;\n            minutes = minutes;\n          } else {\n            hours = hours - 12;\n            minutes = minutes;\n          }\n\n          ampm = \"PM\";\n        }\n\n        if (hours == 0) {\n          hours = 12;\n          minutes = minutes;\n        }\n      }\n\n      return {\n        hours: hours,\n        minutes: minutes,\n        am_pm: ampm\n      };\n    }\n  }, {\n    key: 'timeToMinute',\n    value: function timeToMinute(time) {\n      var rMinutes = 1439;\n\n      if (this.props.format == 24) {\n        time = time.split(\":\");\n\n        if (time.length < 2) {\n          throw new Error(\"Invalid time\");\n        }\n\n        var hours = time[0],\n            minutes = parseInt(time[1]);\n        hours = parseInt(hours * 60);\n        rMinutes = hours + minutes;\n      } else {\n        time = time.toUpperCase();\n        time = time.replace(\" \", \"\");\n        var ampm = time.indexOf(\"AM\") != -1 ? \"AM\" : \"PM\";\n        time = time.replace(ampm, \"\");\n        time = time.split(\":\");\n\n        if (time.length < 2) {\n          throw new Error(\"Invalid time\");\n        }\n\n        var _hours = parseInt(time[0]),\n            _minutes = parseInt(time[1]);\n\n        if (ampm == \"PM\") {\n          if (_hours != 12) {\n            _hours = _hours + 12;\n          }\n        } else {\n          _hours = _hours == 12 ? 0 : _hours;\n        }\n\n        _hours = _hours * 60;\n        rMinutes = _hours + _minutes;\n      }\n\n      return rMinutes > 1439 ? 1439 : rMinutes;\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(value) {\n      var start = this.minuteToTime(value.min);\n      var end = this.minuteToTime(value.max);\n      var nStart = start.hours + \":\" + start.minutes;\n      var nEnd = end.hours + \":\" + end.minutes;\n\n      if (this.props.format == 12) {\n        nStart += \" \" + start.am_pm;\n        nEnd += \" \" + end.am_pm;\n      }\n\n      this.props.onChange({\n        start: nStart,\n        end: nEnd\n      });\n    }\n  }, {\n    key: 'onChangeComplete',\n    value: function onChangeComplete(value) {\n      var start = this.minuteToTime(value.min),\n          end = this.minuteToTime(value.max);\n      this.props.onChangeComplete({\n        start: start,\n        end: end\n      });\n    }\n  }, {\n    key: 'onChangeStart',\n    value: function onChangeStart(value) {\n      var start = this.minuteToTime(value.min),\n          end = this.minuteToTime(value.max);\n      this.props.onChangeStart({\n        start: start,\n        end: end\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props$value = this.props.value,\n          start = _props$value.start,\n          end = _props$value.end,\n          min = this.timeToMinute(start),\n          max = this.timeToMinute(end);\n      return _react2.default.createElement(_reactInputRange2.default, {\n        disabled: this.props.disabled,\n        draggableTrack: this.props.draggableTrack,\n        maxValue: this.timeToMinute(this.props.maxValue),\n        minValue: this.timeToMinute(this.props.minValue),\n        onChangeStart: this.onChangeStart.bind(this),\n        onChange: this.onChange.bind(this),\n        onChangeComplete: this.onChangeComplete.bind(this),\n        step: this.props.step,\n        value: {\n          min: min,\n          max: max\n        }\n      });\n    }\n  }]);\n\n  return TimeRangeSlider;\n}(_react.Component);\n\nTimeRangeSlider.defaultProps = {\n  disabled: false,\n  draggableTrack: false,\n  format: 24,\n  maxValue: \"23:59\",\n  minValue: \"00:00\",\n  onChange: function onChange() {},\n  onChangeComplete: function onChangeComplete() {},\n  onChangeStart: function onChangeStart() {},\n  step: 15,\n  value: {\n    start: \"00:00\",\n    end: \"23:59\"\n  }\n};\nexports.default = TimeRangeSlider;","map":null,"metadata":{},"sourceType":"script"}