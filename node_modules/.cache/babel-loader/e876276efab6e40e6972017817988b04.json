{"ast":null,"code":"function request(url, method, body) {\n  const full_url = 'https://back-q-doctor.herokuapp.com' + url;\n  const params = {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n\n  return fetch(full_url, params);\n}\n\nconst fetchCreateAppointment = (omsNumber, birthDate, params) => request(\"/people/appointments\", 'POST', Object.assign({}, {\n  appointment: params,\n  person: {\n    omsNumber,\n    birthDate\n  }\n}));\n\nconst fetchLoadAppointments = (omsNumber, birthDate) => request(\"/people/appointments?omsNumber=\".concat(omsNumber, \"&birthDate=\").concat(birthDate), 'GET');\n\nconst fetchDeleteAppointment = (omsNumber, birthDate, appointmentId) => request(\"/people/appointments/\".concat(appointmentId, \"?omsNumber=\").concat(omsNumber, \"&birthDate=\").concat(birthDate), 'DELETE');\n\nconst registrationUser = (omsNumber, birthDate) => request('/people', 'POST', {\n  oms_number: omsNumber,\n  birth_date: birthDate\n});\n\nexport { fetchCreateAppointment, fetchLoadAppointments, fetchDeleteAppointment, registrationUser }; // const start = new Date(Date.parse(date));\n// const end = new Date(new Date(start).setDate(start.getDate()+1))\n// return {\n// \t'appointment': {\n// \t\t'available_resource_id': String(availableResourceId),\n// \t\t'complex_resource_id': String(complexResourceId),\n// \t\t'start_time': start.toISOString().split('.')[0],\n// \t\t'finish_time': end.toISOString().split('.')[0],\n// \t\t'lpu_id': String(lpuId),\n// \t\t'priority': 0,\n// \t\t'reception_type_code_or_ldp_type_code': code,\n// \t},\n// \t'person': {\n// \t\t'birth_date': birthDate,\n// \t\t'oms_number': omsNumber,\n// \t}","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/back.js"],"names":["request","url","method","body","full_url","params","headers","JSON","stringify","fetch","fetchCreateAppointment","omsNumber","birthDate","Object","assign","appointment","person","fetchLoadAppointments","fetchDeleteAppointment","appointmentId","registrationUser","oms_number","birth_date"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAClC,QAAMC,QAAQ,GAAG,wCAAsCH,GAAvD;AACA,QAAMI,MAAM,GAAG;AACbH,IAAAA,MAAM,EAAEA,MADK;AAEbI,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAFI,GAAf;;AAKA,MAAIH,IAAJ,EAAU;AACRE,IAAAA,MAAM,CAACF,IAAP,GAAcI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAd;AACD;;AAED,SAAOM,KAAK,CAACL,QAAD,EAAWC,MAAX,CAAZ;AACD;;AAGD,MAAMK,sBAAsB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBP,MAAvB,KAAkCL,OAAO,yBAAyB,MAAzB,EAAiCa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAACC,EAAAA,WAAW,EAAEV,MAAd;AAAsBW,EAAAA,MAAM,EAAE;AAACL,IAAAA,SAAD;AAAYC,IAAAA;AAAZ;AAA9B,CAAlB,CAAjC,CAAxE;;AACA,MAAMK,qBAAqB,GAAG,CAACN,SAAD,EAAYC,SAAZ,KAA0BZ,OAAO,0CAAmCW,SAAnC,wBAA0DC,SAA1D,GAAuE,KAAvE,CAA/D;;AACA,MAAMM,sBAAsB,GAAG,CAACP,SAAD,EAAYC,SAAZ,EAAuBO,aAAvB,KAAyCnB,OAAO,gCAAyBmB,aAAzB,wBAAoDR,SAApD,wBAA2EC,SAA3E,GAAwF,QAAxF,CAA/E;;AACA,MAAMQ,gBAAgB,GAAG,CAACT,SAAD,EAAYC,SAAZ,KAA0BZ,OAAO,CAAC,SAAD,EAAY,MAAZ,EAAoB;AAACqB,EAAAA,UAAU,EAAEV,SAAb;AAAwBW,EAAAA,UAAU,EAAEV;AAApC,CAApB,CAA1D;;AAEA,SAASF,sBAAT,EAAiCO,qBAAjC,EAAwDC,sBAAxD,EAAgFE,gBAAhF,G,CAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["function request(url, method, body) {\n  const full_url = 'https://back-q-doctor.herokuapp.com'+url\n  const params = {\n    method: method,\n    headers: {'Content-Type': 'application/json'},\n  };\n\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n\n  return fetch(full_url, params);\n}\n\n\nconst fetchCreateAppointment = (omsNumber, birthDate, params) => request(`/people/appointments`, 'POST', Object.assign({}, {appointment: params, person: {omsNumber, birthDate}}))\nconst fetchLoadAppointments = (omsNumber, birthDate) => request(`/people/appointments?omsNumber=${omsNumber}&birthDate=${birthDate}`, 'GET')\nconst fetchDeleteAppointment = (omsNumber, birthDate, appointmentId) => request(`/people/appointments/${appointmentId}?omsNumber=${omsNumber}&birthDate=${birthDate}`, 'DELETE')\nconst registrationUser = (omsNumber, birthDate) => request('/people', 'POST', {oms_number: omsNumber, birth_date: birthDate});\n\nexport { fetchCreateAppointment, fetchLoadAppointments, fetchDeleteAppointment, registrationUser };\n\n\n\t\t// const start = new Date(Date.parse(date));\n\t\t// const end = new Date(new Date(start).setDate(start.getDate()+1))\n\t\t// return {\n\t\t// \t'appointment': {\n\t\t// \t\t'available_resource_id': String(availableResourceId),\n\t\t// \t\t'complex_resource_id': String(complexResourceId),\n\t\t// \t\t'start_time': start.toISOString().split('.')[0],\n\t\t// \t\t'finish_time': end.toISOString().split('.')[0],\n\t\t// \t\t'lpu_id': String(lpuId),\n\t\t// \t\t'priority': 0,\n\t\t// \t\t'reception_type_code_or_ldp_type_code': code,\n\t\t// \t},\n\t\t// \t'person': {\n\t\t// \t\t'birth_date': birthDate,\n\t\t// \t\t'oms_number': omsNumber,\n\t\t// \t}"]},"metadata":{},"sourceType":"module"}