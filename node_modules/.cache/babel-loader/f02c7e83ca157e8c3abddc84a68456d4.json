{"ast":null,"code":"const BASE_URL = \"https://back-q-doctor.herokuapp.com/api\";\nconst APPOINTMENT_URL = \"/people/appointments\";\n\nfunction generateBodyForCreateAppointment(dates) {\n  const appointments = [];\n\n  for (let date of dates) {\n    const start = new Date(Date.parse(date));\n    const end = new Date(new Date(start).setDate(start.getDate() + 1));\n    appointments.push({\n      \"appointment\": {\n        \"available_resource_id\": String(availableResourceId),\n        \"complex_resource_id\": String(complexResourceId),\n        \"start_time\": start.toISOString().split('.')[0],\n        \"finish_time\": end.toISOString().split('.')[0],\n        \"lpu_id\": String(lpuId),\n        \"priority\": 0,\n        \"reception_type_code_or_ldp_type_code\": code\n      },\n      \"person\": {\n        \"birth_date\": birthDate,\n        \"oms_number\": omsNumber\n      }\n    });\n  }\n\n  ;\n  return appointments;\n}\n\n;\n\nfunction fetchCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, dates) {\n  return Promise.all(appointments.map(appointment => fetch(BASE_URL + APPOINTMENT_URL, {\n    method: 'POST',\n    body: JSON.stringify(appointment),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })));\n}\n\nfunction fetchLoadAppointment(omsNumber, birthDate) {\n  return fetch(BASE_URL + APPOINTMENT_URL + \"?oms_number=\".concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\n;\n\nfunction fetchDeleteAppointment(appointmentId, omsNumber, birthDate) {\n  return fetch(BASE_URL + APPOINTMENT_URL + \"/\".concat(appointmentId, \"?oms_number=\").concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\n; // handleDeleteAppointment(appointmentId) {\n// \tthis.fetchDeleteAppointment(appointmentId, localStorage.getItem('omsNumber'), localStorage.getItem('birthDate'))\n// \t.then(()=>this.setState({departments: this.state.departments.filter(department => department.appointment_id !== appointmentId)}));\n// };\n// handleDeleteAllAppointment(doctor) {\n// \tthis.state.departments.filter(department => department.available_resource_id === doctor).map(department =>\n// \t\tthis.fetchDeleteAppointment(department.appointment_id, localStorage.getItem('omsNumber'), localStorage.getItem('birthDate'))\n// \t\t.then(()=>this.setState({departments: this.state.departments.filter(department => department.available_resource_id !== doctor)})));\n// };\n\nexport const createAppointment = payload => {\n  return function (dispatch) {\n    dispatch(createAppointmentAction);\n    return fetchCreateAppointment(payload).then(response => dispatch(createAppointmentSuccess));\n  };\n};\nexport const loadAppointment = payload => {\n  return function (dispatch) {\n    dispatch(loadAppointmentAction);\n    return fetchLoadAppointment(...payload).then(response => response.json()).then(response => dispatch(loadAppointmentSuccess(response)));\n  };\n};\nexport const deleteAppointment = payload => {\n  return function (dispatch) {\n    dispatch(deleteAppointmentAction);\n    return fetchDeleteAppointment(...payload).then(response => response.json()).then(response => dispatch(deleteAppointmentSuccess(response)));\n  };\n};\nexport const createAppointmentAction = {\n  type: 'CREATE_APPOINTMENT',\n  payload: null\n};\nexport const createAppointmentSuccess = payload => ({\n  type: 'CREATE_APPOINTMENT_SUCCESS',\n  payload: null\n});\nexport const loadAppointmentAction = {\n  type: 'LOAD_APPOINTMENT',\n  payload: null\n};\nexport const loadAppointmentSuccess = payload => ({\n  type: 'LOAD_APPOINTMENT_SUCCESS',\n  payload: payload\n});\nexport const deleteAppointmentAction = {\n  type: 'DELETE_APPOINTMENT',\n  payload: null\n};\nexport const deleteAppointmentSuccess = payload => ({\n  type: 'DELETE_APPOINTMENT_SUCCESS',\n  payload: payload\n});","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/appointment/actions.js"],"names":["BASE_URL","APPOINTMENT_URL","generateBodyForCreateAppointment","dates","appointments","date","start","Date","parse","end","setDate","getDate","push","String","availableResourceId","complexResourceId","toISOString","split","lpuId","code","birthDate","omsNumber","fetchCreateAppointment","Promise","all","map","appointment","fetch","method","body","JSON","stringify","headers","fetchLoadAppointment","fetchDeleteAppointment","appointmentId","createAppointment","payload","dispatch","createAppointmentAction","then","response","createAppointmentSuccess","loadAppointment","loadAppointmentAction","json","loadAppointmentSuccess","deleteAppointment","deleteAppointmentAction","deleteAppointmentSuccess","type"],"mappings":"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","sourcesContent":["const BASE_URL = \"https://back-q-doctor.herokuapp.com/api\"\nconst APPOINTMENT_URL = \"/people/appointments\"\n\n\nfunction generateBodyForCreateAppointment(dates) {\n\tconst appointments = [];\n\tfor (let date of dates) {\n\t\tconst start = new Date(Date.parse(date));\n\t\tconst end = new Date(new Date(start).setDate(start.getDate()+1))\n\t\tappointments.push({\n\t\t\t\"appointment\": {\n\t\t\t\t\"available_resource_id\": String(availableResourceId),\n\t\t\t\t\"complex_resource_id\": String(complexResourceId),\n\t\t\t\t\"start_time\": start.toISOString().split('.')[0],\n\t\t\t\t\"finish_time\": end.toISOString().split('.')[0],\n\t\t\t\t\"lpu_id\": String(lpuId),\n\t\t\t\t\"priority\": 0,\n\t\t\t\t\"reception_type_code_or_ldp_type_code\": code,\n\t\t\t},\n\t\t\t\"person\": {\n\t\t\t\t\"birth_date\": birthDate,\n\t\t\t\t\"oms_number\": omsNumber,\n\t\t\t}\n\t\t})\n\t};\n\treturn appointments;\n};\n\n\nfunction fetchCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, dates) {\n\treturn Promise.all(appointments.map(appointment =>\n\t\tfetch(\n\t\t\tBASE_URL+APPOINTMENT_URL,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(appointment),\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t}\n\t\t)\n\t));\n}\n\nfunction fetchLoadAppointment(omsNumber, birthDate) {\n  return fetch(\n    BASE_URL+APPOINTMENT_URL+`?oms_number=${omsNumber}&birth_date=${birthDate}`,\n    {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'},\n    },\n  );\n};\n\n\nfunction fetchDeleteAppointment(appointmentId, omsNumber, birthDate) {\n\treturn fetch(\n\t\tBASE_URL+APPOINTMENT_URL+`/${appointmentId}?oms_number=${omsNumber}&birth_date=${birthDate}`,\n\t\t{\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {'Content-Type': 'application/json'},\n\t\t});\n};\n\n\n\n\n\n// handleDeleteAppointment(appointmentId) {\n// \tthis.fetchDeleteAppointment(appointmentId, localStorage.getItem('omsNumber'), localStorage.getItem('birthDate'))\n// \t.then(()=>this.setState({departments: this.state.departments.filter(department => department.appointment_id !== appointmentId)}));\n// };\n\n// handleDeleteAllAppointment(doctor) {\n// \tthis.state.departments.filter(department => department.available_resource_id === doctor).map(department =>\n// \t\tthis.fetchDeleteAppointment(department.appointment_id, localStorage.getItem('omsNumber'), localStorage.getItem('birthDate'))\n// \t\t.then(()=>this.setState({departments: this.state.departments.filter(department => department.available_resource_id !== doctor)})));\n// };\n\nexport const createAppointment = payload => {\n\treturn function(dispatch) {\n\t\tdispatch(createAppointmentAction)\n\t\treturn fetchCreateAppointment(payload)\n\t\t\t.then(response => dispatch(createAppointmentSuccess));\n\t};\n};\n\nexport const loadAppointment = payload => {\n\treturn function(dispatch) {\n    dispatch(loadAppointmentAction);\n\t\treturn fetchLoadAppointment(...payload)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => dispatch(loadAppointmentSuccess(response)));\n\t};\n};\n\nexport const deleteAppointment = payload => {\n\treturn function(dispatch) {\n    dispatch(deleteAppointmentAction);\n\t\treturn fetchDeleteAppointment(...payload)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => dispatch(deleteAppointmentSuccess(response)));\n\t};\n};\n\nexport const createAppointmentAction = {\n\ttype: 'CREATE_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const createAppointmentSuccess = payload => ({\n\ttype: 'CREATE_APPOINTMENT_SUCCESS',\n\tpayload: null,\n});\n\nexport const loadAppointmentAction = {\n\ttype: 'LOAD_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const loadAppointmentSuccess = payload => ({\n\ttype: 'LOAD_APPOINTMENT_SUCCESS',\n\tpayload: payload,\n});\n\nexport const deleteAppointmentAction = {\n\ttype: 'DELETE_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const deleteAppointmentSuccess = payload => ({\n\ttype: 'DELETE_APPOINTMENT_SUCCESS',\n\tpayload: payload,\n});\n"]},"metadata":{},"sourceType":"module"}