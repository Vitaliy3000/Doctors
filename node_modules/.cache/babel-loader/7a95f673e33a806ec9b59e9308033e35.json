{"ast":null,"code":"import { saveUserData } from '../authorization/actions';\nconst PROXY_URL = \"https://proxy-q-doctor.herokuapp.com/api/emias/\";\nconst SCHEDULE_URL = \"schedule\";\n\nfunction getSchedule(omsNumber, birthDate) {\n  return fetch(PROXY_URL + SCHEDULE_URL + \"?oms_number=\".concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\n;\nexport const loadSchedule = payload => {\n  return function (dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload).then(response => {\n      if (response.status !== 200) {\n        throw 'Ошибка авторизации';\n      }\n\n      ;\n      return response;\n    }).then(response => response.json()).then(response => {\n      console.log('response', response);\n      return response;\n    }).then(response => {\n      dispatch(loadScheduleSuccess(response));\n      dispatch(saveUserData(payload));\n    }).catch(error => dispatch(loadScheduleFailureAction));\n  };\n};\nexport const loadScheduleAction = {\n  type: 'LOAD_SCHEDULE',\n  payload: null\n};\nexport const loadScheduleFailureAction = {\n  type: 'LOAD_SCHEDULE_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadScheduleSuccess = payload => {\n  console.log('action', payload);\n  return {\n    type: 'LOAD_SCHEDULE_SUCCESS',\n    payload: payload\n  };\n};\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null\n};","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/schedule/actions.js"],"names":["saveUserData","PROXY_URL","SCHEDULE_URL","getSchedule","omsNumber","birthDate","fetch","method","headers","loadSchedule","payload","dispatch","loadScheduleAction","then","response","status","json","console","log","loadScheduleSuccess","catch","error","loadScheduleFailureAction","type","closeBanner"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAG,iDAAlB;AACA,MAAMC,YAAY,GAAG,UAArB;;AAGA,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,SAAhC,EAA2C;AACzC,SAAOC,KAAK,CACVL,SAAS,GAACC,YAAV,yBAAsCE,SAAtC,yBAA8DC,SAA9D,CADU,EAEV;AACEE,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAFX,GAFU,CAAZ;AAOD;;AAAA;AAGD,OAAO,MAAMC,YAAY,GAAGC,OAAO,IAAI;AACtC,SAAO,UAASC,QAAT,EAAmB;AACvBA,IAAAA,QAAQ,CAACC,kBAAD,CAAR;AACA,WAAOT,WAAW,CAAC,GAAGO,OAAJ,CAAX,CACEG,IADF,CACOC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAAC,cAAM,oBAAN;AAA2B;;AAAA;AACzD,aAAOD,QAAP;AACD,KAJF,EAKED,IALF,CAKOC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EALnB,EAMEH,IANF,CAMOC,QAAQ,IAAI;AAACG,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,QAAxB;AAAmC,aAAOA,QAAP;AAAgB,KANvE,EAOED,IAPF,CAOOC,QAAQ,IAAI;AAACH,MAAAA,QAAQ,CAACQ,mBAAmB,CAACL,QAAD,CAApB,CAAR;AAA0CH,MAAAA,QAAQ,CAACX,YAAY,CAACU,OAAD,CAAb,CAAR;AAAgC,KAP9F,EAQEU,KARF,CAQQC,KAAK,IAAIV,QAAQ,CAACW,yBAAD,CARzB,CAAP;AASF,GAXD;AAYA,CAbM;AAeP,OAAO,MAAMV,kBAAkB,GAAG;AACjCW,EAAAA,IAAI,EAAE,eAD2B;AAEjCb,EAAAA,OAAO,EAAE;AAFwB,CAA3B;AAKP,OAAO,MAAMY,yBAAyB,GAAG;AACxCC,EAAAA,IAAI,EAAE,uBADkC;AAExCb,EAAAA,OAAO,EAAE;AAF+B,CAAlC;AAKP,OAAO,MAAMS,mBAAmB,GAAGT,OAAO,IAAI;AAC5CO,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,OAAtB;AACA,SAAQ;AACTa,IAAAA,IAAI,EAAE,uBADG;AAETb,IAAAA,OAAO,EAAEA;AAFA,GAAR;AAGE,CALG;AAOP,OAAO,MAAMc,WAAW,GAAG;AACzBD,EAAAA,IAAI,EAAE,gBADmB;AAEzBb,EAAAA,OAAO,EAAE;AAFgB,CAApB","sourcesContent":["import {saveUserData} from '../authorization/actions'\n\nconst PROXY_URL = \"https://proxy-q-doctor.herokuapp.com/api/emias/\"\nconst SCHEDULE_URL = \"schedule\"\n\n\nfunction getSchedule(omsNumber, birthDate) {\n  return fetch(\n    PROXY_URL+SCHEDULE_URL+`?oms_number=${omsNumber}&birth_date=${birthDate}`,\n    {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'},\n    },\n  );\n};\n\n\nexport const loadSchedule = payload => {\n\treturn function(dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload)\n            .then(response => {\n              if (response.status !== 200) {throw 'Ошибка авторизации'};\n              return response\n            })\n            .then(response => response.json())\n            .then(response => {console.log('response', response); return response})\n            .then(response => {dispatch(loadScheduleSuccess(response));  dispatch(saveUserData(payload))})\n            .catch(error => dispatch(loadScheduleFailureAction));\n\t};\n};\n\nexport const loadScheduleAction = {\n\ttype: 'LOAD_SCHEDULE',\n\tpayload: null,\n};\n\nexport const loadScheduleFailureAction = {\n\ttype: 'LOAD_SCHEDULE_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\nexport const loadScheduleSuccess = payload => {\n  console.log('action', payload)\n  return ({\n\ttype: 'LOAD_SCHEDULE_SUCCESS',\n\tpayload: payload,\n});}\n\nexport const closeBanner = {\n  type: 'RESET_SCHEDULE',\n  payload: null,\n}"]},"metadata":{},"sourceType":"module"}