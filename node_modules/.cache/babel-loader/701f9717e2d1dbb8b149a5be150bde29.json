{"ast":null,"code":"import { registrationUser } from '../back';\nimport { getDepartments, getDoctors, getSchedule } from '../proxyEmias';\nimport { saveUserData } from '../user/action';\nexport const loadDepartments = payload => {\n  return function (dispatch) {\n    dispatch(loadDepartmentsAction);\n    return getDepartments(...payload).then(response => {\n      if (response.status !== 200) {\n        throw 'Ошибка авторизации';\n      }\n\n      return response;\n    }).then(response => response.json()).then(response => {\n      registrationUser(...payload).then(innerResponse => {\n        console.log();\n\n        if (innerResponse.status !== 200 && innerResponse.status !== 201) {\n          throw 'Ошибка авторизации';\n        }\n\n        return response;\n      }).then(response => {\n        dispatch(loadDepartmentsSuccess(response));\n        dispatch(saveUserData(payload));\n      });\n    }).catch(() => dispatch(loadDepartmentsFailureAction));\n  };\n};\nexport const loadDoctors = payload => {\n  return function (dispatch) {\n    dispatch(loadDoctorsAction);\n    return getDoctors(...payload).then(response => response.json()).then(response => dispatch(loadDoctorsSuccess(response))).catch(() => dispatch(loadDoctorsFailureAction));\n  };\n};\nexport const loadSchedule = payload => {\n  return function (dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload).then(response => response.json()).then(response => dispatch(loadScheduleSuccess(response))).catch(() => dispatch(loadScheduleFailureAction));\n  };\n};\nexport const loadDepartmentsAction = {\n  type: 'LOAD_DEPARTMENTS',\n  payload: null\n};\nexport const loadDepartmentsFailureAction = {\n  type: 'LOAD_DEPARTMENTS_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadDepartmentsSuccess = payload => {\n  return {\n    type: 'LOAD_DEPARTMENTS_SUCCESS',\n    payload: payload\n  };\n};\nexport const loadDoctorsAction = {\n  type: 'LOAD_DOCTORS',\n  payload: null\n};\nexport const loadDoctorsFailureAction = {\n  type: 'LOAD_DOCTORS_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadDoctorsSuccess = payload => {\n  return {\n    type: 'LOAD_DOCTORS_SUCCESS',\n    payload: payload\n  };\n};\nexport const loadScheduleAction = {\n  type: 'LOAD_SCHEDULE',\n  payload: null\n};\nexport const loadScheduleFailureAction = {\n  type: 'LOAD_SCHEDULE_FAILURE',\n  payload: 'Авторизация завершилась с ошибкой'\n};\nexport const loadScheduleSuccess = payload => {\n  return {\n    type: 'LOAD_SCHEDULE_SUCCESS',\n    payload: payload\n  };\n};","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/emias/actions.js"],"names":["registrationUser","getDepartments","getDoctors","getSchedule","saveUserData","loadDepartments","payload","dispatch","loadDepartmentsAction","then","response","status","json","innerResponse","console","log","loadDepartmentsSuccess","catch","loadDepartmentsFailureAction","loadDoctors","loadDoctorsAction","loadDoctorsSuccess","loadDoctorsFailureAction","loadSchedule","loadScheduleAction","loadScheduleSuccess","loadScheduleFailureAction","type"],"mappings":"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","sourcesContent":["import { registrationUser } from '../back'\nimport { getDepartments, getDoctors, getSchedule } from '../proxyEmias'\nimport { saveUserData } from '../user/action'\n\n\nexport const loadDepartments = payload => {\n\treturn function(dispatch) {\n    dispatch(loadDepartmentsAction);\n    return getDepartments(...payload)\n            .then(response => {\n              if (response.status !== 200) {throw 'Ошибка авторизации'}\n              return response\n            })\n            .then(response => response.json())\n            .then(response => {\n              registrationUser(...payload)\n              .then(innerResponse => {\n                console.log()\n                if ((innerResponse.status !== 200) && (innerResponse.status !== 201)) {\n                  throw 'Ошибка авторизации'\n                }\n                return response;\n              })\n              .then(response => {dispatch(loadDepartmentsSuccess(response)); dispatch(saveUserData(payload))});\n            })\n            .catch(() => dispatch(loadDepartmentsFailureAction));\n\t};\n};\n\nexport const loadDoctors = payload => {\n\treturn function(dispatch) {\n    dispatch(loadDoctorsAction);\n    return getDoctors(...payload)\n            .then(response => response.json())\n            .then(response => dispatch(loadDoctorsSuccess(response)))\n            .catch(() => dispatch(loadDoctorsFailureAction));\n\t};\n};\n\n\nexport const loadSchedule = payload => {\n\treturn function(dispatch) {\n    dispatch(loadScheduleAction);\n    return getSchedule(...payload)\n            .then(response => response.json())\n            .then(response => dispatch(loadScheduleSuccess(response)))\n            .catch(() => dispatch(loadScheduleFailureAction));\n\t};\n};\n\n\nexport const loadDepartmentsAction = {\n\ttype: 'LOAD_DEPARTMENTS',\n\tpayload: null,\n};\n\n\nexport const loadDepartmentsFailureAction = {\n\ttype: 'LOAD_DEPARTMENTS_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\n\nexport const loadDepartmentsSuccess = payload => {\n  return ({\n\ttype: 'LOAD_DEPARTMENTS_SUCCESS',\n\tpayload: payload,\n});}\n\n\nexport const loadDoctorsAction = {\n\ttype: 'LOAD_DOCTORS',\n\tpayload: null,\n};\n\n\nexport const loadDoctorsFailureAction = {\n\ttype: 'LOAD_DOCTORS_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\n\nexport const loadDoctorsSuccess = payload => {\n  return ({\n\ttype: 'LOAD_DOCTORS_SUCCESS',\n\tpayload: payload,\n});}\n\n\nexport const loadScheduleAction = {\n\ttype: 'LOAD_SCHEDULE',\n\tpayload: null,\n};\n\n\nexport const loadScheduleFailureAction = {\n\ttype: 'LOAD_SCHEDULE_FAILURE',\n\tpayload: 'Авторизация завершилась с ошибкой',\n};\n\n\nexport const loadScheduleSuccess = payload => {\n  return ({\n\ttype: 'LOAD_SCHEDULE_SUCCESS',\n\tpayload: payload,\n});}\n\n"]},"metadata":{},"sourceType":"module"}