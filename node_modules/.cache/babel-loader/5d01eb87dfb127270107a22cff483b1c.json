{"ast":null,"code":"const PROXY_URL = \"https://proxy-q-doctor.herokuapp.com/api/emias/\";\nconst SCHEDULE_URL = \"schedule\"; // fetchSchedule(omsNumber, birthDate) {\n//   return \n//           // .then(response => {\n//           //         localStorage.setItem('schedule', JSON.stringify(response));\n//           //         localStorage.setItem('authFlag', Boolean(Object.entries(response).length));\n//           // })\n//           // .catch(err => this.setState({err}))\n//           // .finally(_ => this.setState({loadingFlag: false}))\n// };\n\nexport const loadSchedule = payload => {\n  return function (dispatch) {\n    dispatch(loadScheduleAction);\n    console.log('test_redux', payload);\n    let omsNumber = '1';\n    let birthDate = '2';\n    return fetch(PROXY_URL + SCHEDULE_URL + \"?oms_number=\".concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.status !== 200) {\n        throw 'Ошибка авторизации';\n      }\n\n      return response;\n    }).then(response => response.json()); // getOperations(payload).then(\n    // \tx => dispatch(loadOperationsSuccess(x)),\n    // \terr => dispatch(loadOperationsFailureAction())\n    // );\n  };\n};\nexport const loadScheduleAction = {\n  type: 'LOAD_SCHEDULE',\n  payload: null\n};\nexport const loadScheduleFailureAction = {\n  type: 'LOAD_SCHEDULE_FAILURE',\n  payload: null\n};\nexport const loadScheduleSuccess = payload => ({\n  type: 'LOAD_SCHEDULE_SUCCESS',\n  payload: payload\n});","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/schedule/actions.js"],"names":["PROXY_URL","SCHEDULE_URL","loadSchedule","payload","dispatch","loadScheduleAction","console","log","omsNumber","birthDate","fetch","headers","then","response","status","json","type","loadScheduleFailureAction","loadScheduleSuccess"],"mappings":"AAAA,MAAMA,SAAS,GAAG,iDAAlB;AACA,MAAMC,YAAY,GAAG,UAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGC,OAAO,IAAI;AACtC,SAAO,UAASC,QAAT,EAAmB;AACvBA,IAAAA,QAAQ,CAACC,kBAAD,CAAR;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,OAA1B;AACA,QAAIK,SAAS,GAAG,GAAhB;AACA,QAAIC,SAAS,GAAG,GAAhB;AACA,WAAOC,KAAK,CAACV,SAAS,GAACC,YAAV,yBAAsCO,SAAtC,yBAA8DC,SAA9D,CAAD,EACC;AAACE,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAV,KADD,CAAL,CAEEC,IAFF,CAEOC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,oBAAN;AACD;;AACD,aAAOD,QAAP;AACD,KAPF,EAQED,IARF,CAQOC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EARnB,CAAP,CANuB,CAiBvB;AACF;AACA;AACA;AACA,GArBD;AAsBA,CAvBM;AAyBP,OAAO,MAAMV,kBAAkB,GAAG;AACjCW,EAAAA,IAAI,EAAE,eAD2B;AAEjCb,EAAAA,OAAO,EAAE;AAFwB,CAA3B;AAKP,OAAO,MAAMc,yBAAyB,GAAG;AACxCD,EAAAA,IAAI,EAAE,uBADkC;AAExCb,EAAAA,OAAO,EAAE;AAF+B,CAAlC;AAKP,OAAO,MAAMe,mBAAmB,GAAGf,OAAO,KAAK;AAC9Ca,EAAAA,IAAI,EAAE,uBADwC;AAE9Cb,EAAAA,OAAO,EAAEA;AAFqC,CAAL,CAAnC","sourcesContent":["const PROXY_URL = \"https://proxy-q-doctor.herokuapp.com/api/emias/\"\nconst SCHEDULE_URL = \"schedule\"\n\n// fetchSchedule(omsNumber, birthDate) {\n//   return \n//           // .then(response => {\n//           //         localStorage.setItem('schedule', JSON.stringify(response));\n//           //         localStorage.setItem('authFlag', Boolean(Object.entries(response).length));\n//           // })\n//           // .catch(err => this.setState({err}))\n//           // .finally(_ => this.setState({loadingFlag: false}))\n// };\n\nexport const loadSchedule = payload => {\n\treturn function(dispatch) {\n    dispatch(loadScheduleAction);\n    \n    console.log('test_redux', payload)\n    let omsNumber = '1'\n    let birthDate = '2'\n    return fetch(PROXY_URL+SCHEDULE_URL+`?oms_number=${omsNumber}&birth_date=${birthDate}`,\n                 {headers: {'Content-Type': 'application/json'}})\n            .then(response => {\n              if (response.status !== 200) {\n                throw 'Ошибка авторизации';\n              }\n              return response\n            })\n            .then(response => response.json())\n    \n    \n    // getOperations(payload).then(\n\t\t// \tx => dispatch(loadOperationsSuccess(x)),\n\t\t// \terr => dispatch(loadOperationsFailureAction())\n\t\t// );\n\t};\n};\n\nexport const loadScheduleAction = {\n\ttype: 'LOAD_SCHEDULE',\n\tpayload: null,\n};\n\nexport const loadScheduleFailureAction = {\n\ttype: 'LOAD_SCHEDULE_FAILURE',\n\tpayload: null,\n};\n\nexport const loadScheduleSuccess = payload => ({\n\ttype: 'LOAD_SCHEDULE_SUCCESS',\n\tpayload: payload,\n});"]},"metadata":{},"sourceType":"module"}