{"ast":null,"code":"const BASE_URL = 'https://back-q-doctor.herokuapp.com/api';\nconst APPOINTMENT_URL = '/people/appointments';\n\nfunction generateBodyForCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, date) {\n  const start = new Date(Date.parse(date));\n  const end = new Date(new Date(start).setDate(start.getDate() + 1));\n  return {\n    'appointment': {\n      'available_resource_id': String(availableResourceId),\n      'complex_resource_id': String(complexResourceId),\n      'start_time': start.toISOString().split('.')[0],\n      'finish_time': end.toISOString().split('.')[0],\n      'lpu_id': String(lpuId),\n      'priority': 0,\n      'reception_type_code_or_ldp_type_code': code\n    },\n    'person': {\n      'birth_date': birthDate,\n      'oms_number': omsNumber\n    }\n  };\n}\n\nfunction fetchCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, dates) {\n  return Promise.all(dates.map(date => fetch(BASE_URL + APPOINTMENT_URL, {\n    method: 'POST',\n    body: JSON.stringify(generateBodyForCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, date)),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })));\n}\n\nfunction fetchLoadAppointment(omsNumber, birthDate) {\n  return fetch(BASE_URL + APPOINTMENT_URL + \"?oms_number=\".concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nfunction fetchDeleteAppointment(appointmentId, omsNumber, birthDate) {\n  return fetch(BASE_URL + APPOINTMENT_URL + \"/\".concat(appointmentId, \"?oms_number=\").concat(omsNumber, \"&birth_date=\").concat(birthDate), {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nexport const createAppointment = payload => {\n  return function (dispatch) {\n    dispatch(createAppointmentAction);\n    return fetchCreateAppointment(...payload).then(() => dispatch(createAppointmentSuccess), () => dispatch(createAppointmentFailure));\n  };\n};\nexport const loadAppointment = payload => {\n  return function (dispatch) {\n    dispatch(loadAppointmentAction);\n    return fetchLoadAppointment(...payload).then(response => response.json()).then(response => dispatch(loadAppointmentSuccess(response)), () => dispatch(loadAppointmentFailure));\n  };\n};\nexport const deleteAppointment = payload => {\n  return function (dispatch) {\n    dispatch(deleteAppointmentAction);\n    return Promise.all(payload[0].map(id => fetchDeleteAppointment(id, payload[1], payload[2]))).then(() => dispatch(deleteAppointmentSuccess(payload[0]))).catch(() => dispatch(deleteAppointmentFailure));\n  };\n};\nexport const createAppointmentAction = {\n  type: 'CREATE_APPOINTMENT',\n  payload: null\n};\nexport const createAppointmentSuccess = {\n  type: 'CREATE_APPOINTMENT_SUCCESS',\n  payload: null\n};\nexport const createAppointmentFailure = {\n  type: 'CREATE_APPOINTMENT_FAILURE',\n  payload: null\n};\nexport const loadAppointmentAction = {\n  type: 'LOAD_APPOINTMENT',\n  payload: null\n};\nexport const loadAppointmentSuccess = payload => ({\n  type: 'LOAD_APPOINTMENT_SUCCESS',\n  payload: payload\n});\nexport const loadAppointmentFailure = {\n  type: 'LOAD_APPOINTMENT_FAILURE',\n  payload: null\n};\nexport const deleteAppointmentAction = {\n  type: 'DELETE_APPOINTMENT',\n  payload: null\n};\nexport const deleteAppointmentSuccess = payload => ({\n  type: 'DELETE_APPOINTMENT_SUCCESS',\n  payload: payload\n});\nexport const deleteAppointmentFailure = {\n  type: 'DELETE_APPOINTMENT_FAILURE',\n  payload: null\n};","map":{"version":3,"sources":["/Users/17476018U/Google Диск/Projects/Frontend/Project/DoctorsFront/src/redux/appointment/actions.js"],"names":["BASE_URL","APPOINTMENT_URL","generateBodyForCreateAppointment","omsNumber","birthDate","availableResourceId","complexResourceId","lpuId","code","date","start","Date","parse","end","setDate","getDate","String","toISOString","split","fetchCreateAppointment","dates","Promise","all","map","fetch","method","body","JSON","stringify","headers","fetchLoadAppointment","fetchDeleteAppointment","appointmentId","createAppointment","payload","dispatch","createAppointmentAction","then","createAppointmentSuccess","createAppointmentFailure","loadAppointment","loadAppointmentAction","response","json","loadAppointmentSuccess","loadAppointmentFailure","deleteAppointment","deleteAppointmentAction","id","deleteAppointmentSuccess","catch","deleteAppointmentFailure","type"],"mappings":"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","sourcesContent":["const BASE_URL = 'https://back-q-doctor.herokuapp.com/api'\nconst APPOINTMENT_URL = '/people/appointments'\n\n\nfunction generateBodyForCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, date) {\n\t\tconst start = new Date(Date.parse(date));\n\t\tconst end = new Date(new Date(start).setDate(start.getDate()+1))\n\t\treturn {\n\t\t\t'appointment': {\n\t\t\t\t'available_resource_id': String(availableResourceId),\n\t\t\t\t'complex_resource_id': String(complexResourceId),\n\t\t\t\t'start_time': start.toISOString().split('.')[0],\n\t\t\t\t'finish_time': end.toISOString().split('.')[0],\n\t\t\t\t'lpu_id': String(lpuId),\n\t\t\t\t'priority': 0,\n\t\t\t\t'reception_type_code_or_ldp_type_code': code,\n\t\t\t},\n\t\t\t'person': {\n\t\t\t\t'birth_date': birthDate,\n\t\t\t\t'oms_number': omsNumber,\n\t\t\t}\n\t\t};\n}\n\n\nfunction fetchCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, dates) {\n\treturn Promise.all(dates.map(date =>\n\t\t\tfetch(\n\t\t\t\tBASE_URL+APPOINTMENT_URL,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify(generateBodyForCreateAppointment(omsNumber, birthDate, availableResourceId, complexResourceId, lpuId, code, date)),\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t)\n\t);\n}\n\nfunction fetchLoadAppointment(omsNumber, birthDate) {\n  return fetch(\n    BASE_URL+APPOINTMENT_URL+`?oms_number=${omsNumber}&birth_date=${birthDate}`,\n    {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'},\n    },\n  );\n}\n\n\nfunction fetchDeleteAppointment(appointmentId, omsNumber, birthDate) {\n\treturn fetch(\n\t\tBASE_URL+APPOINTMENT_URL+`/${appointmentId}?oms_number=${omsNumber}&birth_date=${birthDate}`,\n\t\t{\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {'Content-Type': 'application/json'},\n\t\t});\n}\n\n\nexport const createAppointment = payload => {\n\treturn function(dispatch) {\n\t\tdispatch(createAppointmentAction)\n\t\treturn fetchCreateAppointment(...payload)\n\t\t\t.then(() => dispatch(createAppointmentSuccess),\n\t\t\t      () => dispatch(createAppointmentFailure));\n\t};\n};\n\nexport const loadAppointment = payload => {\n\treturn function(dispatch) {\n    dispatch(loadAppointmentAction);\n\t\treturn fetchLoadAppointment(...payload)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => dispatch(loadAppointmentSuccess(response)),\n\t\t\t\t\t\t() => dispatch(loadAppointmentFailure));\n\t};\n};\n\nexport const deleteAppointment = payload => {\n\treturn function(dispatch) {\n\t\tdispatch(deleteAppointmentAction);\n\t\treturn Promise.all(payload[0].map(id => fetchDeleteAppointment(id, payload[1], payload[2])))\n\t\t\t\t\t\t.then(() => dispatch(deleteAppointmentSuccess(payload[0])))\n\t\t\t\t\t\t.catch(() => dispatch(deleteAppointmentFailure));\n\t};\n};\n\nexport const createAppointmentAction = {\n\ttype: 'CREATE_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const createAppointmentSuccess = ({\n\ttype: 'CREATE_APPOINTMENT_SUCCESS',\n\tpayload: null,\n});\n\nexport const createAppointmentFailure = {\n\ttype: 'CREATE_APPOINTMENT_FAILURE',\n\tpayload: null,\n};\n\nexport const loadAppointmentAction = {\n\ttype: 'LOAD_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const loadAppointmentSuccess = payload => ({\n\ttype: 'LOAD_APPOINTMENT_SUCCESS',\n\tpayload: payload,\n});\n\nexport const loadAppointmentFailure = {\n\ttype: 'LOAD_APPOINTMENT_FAILURE',\n\tpayload: null,\n};\n\nexport const deleteAppointmentAction = {\n\ttype: 'DELETE_APPOINTMENT',\n\tpayload: null,\n};\n\nexport const deleteAppointmentSuccess = payload => ({\n\ttype: 'DELETE_APPOINTMENT_SUCCESS',\n\tpayload: payload,\n});\n\nexport const deleteAppointmentFailure = {\n\ttype: 'DELETE_APPOINTMENT_FAILURE',\n\tpayload: null,\n};"]},"metadata":{},"sourceType":"module"}